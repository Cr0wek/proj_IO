name: Build and Deploy to Google Cloud VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Dopasuj do wersji Javy
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package --file IO13/pom.xml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: IO13/target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@master
        with:
          # Użyj sekretów SSH_HOST, SSH_USERNAME, SSH_PRIVATE_KEY
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          # Pliki do transferu: pobrany artefakt (JAR)
          source: './*.jar' # Zakłada, że plik JAR jest w bieżącym katalogu po pobraniu artefaktu
          #target: '/opt/my-springboot-app/' # Katalog docelowy na VM, upewnij się, że istnieje i masz do niego uprawnienia

          script: |
            echo "Connected to VM. Deploying Spring Boot application..."

            # Przejdź do katalogu aplikacji na VM
            #cd /opt/my-springboot-app/

            # Zatrzymaj poprzednią wersję aplikacji, jeśli istnieje
            # Użyj 'pkill -f' do zabicia procesu Javy uruchomionego z konkretnego JAR-a
            # lub 'sudo systemctl stop <nazwa_uslugi>' jeśli używasz systemd
            sudo pkill -f 'java -jar /*.jar' || true
            sleep 5 # Poczekaj na zakończenie procesu

            # Usuń stary plik JAR (opcjonalne, ale dobra praktyka)
            sudo rm -f *.jar
            
            # (Plik JAR został już skopiowany przez 'source' i 'target' akcji ssh-action)
            # Zmień nazwę pliku JAR na standardową, jeśli to konieczne
            # mv TwojaNazwaApki-*.jar my-springboot-app.jar # Przykładowo

            # Uruchom aplikację w tle, przekierowując logi do pliku
            # 'nohup' pozwoli aplikacji działać po zakończeniu sesji SSH
            # Zmień 'twoja_nazwa_pliku.jar' na rzeczywistą nazwę pliku JAR po skopiowaniu
            nohup java -jar *.jar > app.log 2>&1 &
            
            echo "Deployment complete. Check /opt/my-springboot-app/app.log for status."
